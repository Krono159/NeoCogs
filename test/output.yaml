#
# This file contains expected test output data generated by PBBT.
#
---
suite: regression-tests-for-neocogs
tests:
- suite: hello-world
  tests:
  - sh: neocogs hello world
    stdout: |
      Hello, World!
  - sh: neocogs hello
    stdout: |
      Hello, Xi!
  - sh: neocogs help hello
    stdout: |+
      HELLO - greet someone (if not specified, the current user)
      Usage: neocogs hello [<name>]

- suite: extending-neocogs
  tests:
  - sh: pip install -q -e .
    stdout: ''
  - sh: neocogs hello world
    stdout: |
      Hello, World!
  - sh: neocogs hello
    stdout: |
      Hello, Xi!
  - sh: neocogs help hello
    stdout: |+
      HELLO - greet someone (if not specified, the current user)
      Usage: neocogs hello [<name>]

  - sh: pip uninstall -q -y neocogs-Hello
    stdout: ''
- suite: factorial-fibonacci
  tests:
  - sh: neocogs factorial 10
    stdout: |
      10! = 3628800
  - sh: neocogs fibonacci 10
    stdout: |
      F_10 = 55
  - sh: neocogs help
    stdout: |+
      neocogs - A task dispatching utility
      Usage: neocogs [<settings>...] <task> [<arguments>...]

      Run neocogs help for general usage and a list of tasks,
      settings and other help topics.

      Run neocogs help <topic> for help on a specific topic.

      Available tasks:
        factorial <n>            : calculate n!
        fibonacci <n>            : calculate the n-th Fibonacci number
        help                     : display help on tasks and settings

      Settings:
        --config=CONFIG_FILE     : config file to retrieve settings from
        --debug                  : print debug information

  - sh: neocogs help factorial
    stdout: |+
      FACTORIAL - calculate n!
      Usage: neocogs factorial <n>

      This task calculates the value of the factorial of the given
      positive number n.  Factorial of n, also known as n!, is
      defined by the formula:

          n! = 1*2*...*(n-1)*n

  - sh: neocogs help fibonacci
    stdout: |+
      FIBONACCI - calculate the n-th Fibonacci number
      Usage: neocogs fibonacci <n>

      The n-th Fibonacci number F_n is defined by:

          F_0 = 0
          F_1 = 1
          F_n = F_{n-1}+F_{n-2} (n>1)

  - sh: neocogs factorial ten
    stdout: |+
      FATAL ERROR: n must be an integer

  - sh: neocogs factorial -- -10
    stdout: |+
      FATAL ERROR: n must be positive

  - sh: neocogs fibonacci ten
    stdout: |+
      FATAL ERROR: invalid value for argument <n>: invalid literal for int() with base 10: 'ten'

  - sh: neocogs fibonacci -- -10
    stdout: |+
      FATAL ERROR: n must be non-negative

- suite: options
  tests:
  - sh: neocogs write-hello
    stdout: |
      Hello, Xi!
  - sh: neocogs write-hello -o ../../test/hello.txt
    stdout: ''
  - read: test/hello.txt
    data: |
      Hello, Xi!
  - sh: neocogs write-hello --output=../../test/hello.txt world
    stdout: ''
  - read: test/hello.txt
    data: |
      Hello, World!
  - sh: neocogs help write-hello
    stdout: |+
      WRITE-HELLO
      Usage: neocogs write-hello [<name>]

      Options:
        output

- suite: configuration
  tests:
  - sh: neocogs hello-with-configuration
    stdout: |
      Hello, Robert!
  - sh: neocogs hello-with-configuration Billy
    stdout: |
      Hello, Billy!
  - sh: neocogs hello-with-configuration
    stdout: |
      Hello, Sam!
  - sh: neocogs hello-with-configuration Billy
    stdout: |
      Hello, Billy!
  - sh: neocogs hello-with-configuration --config=alternate-neocogs.conf
    stdout: |
      Hello, Bob!
  - sh: neocogs hello-with-configuration Billy --config=alternate-neocogs.conf
    stdout: |
      Hello, Billy!
  - sh: neocogs hello-with-configuration --config=alternate-neocogs.conf
    stdout: |
      Hello, Sam!
  - sh: neocogs hello-with-configuration Billy --config=alternate-neocogs.conf
    stdout: |
      Hello, Billy!
